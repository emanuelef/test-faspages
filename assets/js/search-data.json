{
  
    
        "post0": {
            "title": "Title",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import calendar import warnings warnings.filterwarnings(&#39;ignore&#39;) import matplotlib.style as style %config InlineBackend.figure_format = &#39;retina&#39; %matplotlib inline style.available style.use(&#39;ggplot&#39;) plt.rcParams[&#39;figure.figsize&#39;] = [10, 6] . /Users/efumagal/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pandas/compat/__init__.py:117: UserWarning: Could not import the lzma module. Your installed Python is incomplete. Attempting to use lzma compression will result in a RuntimeError. warnings.warn(msg) . operations_df = pd.read_csv(&#39;all.csv&#39;) operations_df[&#39;date&#39;] = operations_df[&#39;date&#39;].astype(&#39;datetime64[ns]&#39;) . operations_df.isnull().sum() . date 0 westerly 0 easterly 0 dtype: int64 . print(f&quot;&gt;&gt; Data Available since {operations_df.date.min()} up to {operations_df.date.max()}&quot;) . &gt;&gt; Data Available since 2012-01-01 00:00:00 up to 2021-11-30 00:00:00 . print(f&quot;Number days on westerly {np.sum(operations_df[&#39;westerly&#39;] &gt;= 0.5)}/{len(operations_df)}&quot;) . Number days on westerly 2595/3622 . percentage_westerly = round(operations_df[&quot;westerly&quot;].mean() * 100) print(f&quot;Total percentage of westerly operations {percentage_westerly}%&quot;) . Total percentage of westerly operations 71.0% . percentage_easterly = round(operations_df[&quot;easterly&quot;].mean() * 100) print(f&quot;Total percentage of easterly operations {percentage_easterly}%&quot;) . Total percentage of easterly operations 29.0% . operations_df[&#39;month&#39;] = operations_df.date.dt.month operations_df[&#39;year&#39;] = operations_df.date.dt.year operations_df[&#39;day&#39;] = operations_df.date.dt.day operations_df[&#39;weekdayName&#39;] = operations_df.date.dt.day_name() operations_df[&#39;weekday&#39;] = operations_df.date.dt.weekday operations_df[&#39;week&#39;] = operations_df.date.dt.week operations_df[&#39;weekend&#39;] = operations_df.date.dt.weekday // 5 == 1 . import matplotlib.colors as colors def make_colormap(seq): &quot;&quot;&quot;Return a LinearSegmentedColormap seq: a sequence of floats and RGB-tuples. The floats should be increasing and in the interval (0,1). &quot;&quot;&quot; seq = [(None,) * 3, 0.0] + list(seq) + [1.0, (None,) * 3] cdict = {&#39;red&#39;: [], &#39;green&#39;: [], &#39;blue&#39;: []} for i, item in enumerate(seq): if isinstance(item, float): r1, g1, b1 = seq[i - 1] r2, g2, b2 = seq[i + 1] cdict[&#39;red&#39;].append([item, r1, r2]) cdict[&#39;green&#39;].append([item, g1, g2]) cdict[&#39;blue&#39;].append([item, b1, b2]) return colors.LinearSegmentedColormap(&#39;CustomMap&#39;, cdict) c = colors.ColorConverter().to_rgb rvb = make_colormap([c(&#39;purple&#39;), c(&#39;red&#39;), 0.45, c(&#39;red&#39;), c(&#39;yellow&#39;), 0.65, c(&#39;yellow&#39;), c(&#39;green&#39;), 0.90, c(&#39;green&#39;)]) . def plot_heatmap(df): plt.figure(figsize = (14, 10)) ax = sns.heatmap(df, cmap = rvb, annot=True, fmt=&#39;.0%&#39;, vmin=0, vmax=1, linewidths=.5, annot_kws={&quot;size&quot;: 18}) cbar = ax.collections[0].colorbar cbar.set_ticks([0, .25, .50,.75, 1]) cbar.set_ticklabels([&#39;0%&#39;, &#39;25%&#39;, &#39;50%&#39;, &#39;75%&#39;, &#39;100%&#39;]) ax.set_yticklabels(ax.get_yticklabels(), rotation = 0, fontsize = 14) ax.set_xticklabels(ax.get_xticklabels(), rotation = 0, fontsize = 14) ax.tick_params(rotation = 0) plt.title(&#39;Westerley Operations&#39;, fontdict={&#39;fontsize&#39;:18}) . ops_month_year_df = pd.pivot_table(operations_df, values=&quot;westerly&quot;,index=[&quot;month&quot;], columns=[&quot;year&quot;], fill_value = None, margins = True) ops_month_year_df = ops_month_year_df.set_index([[calendar.month_abbr[i] if isinstance(i, int) else i for i in list(ops_month_year_df.index)]]) . ops_month_year_df . year 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 All . Jan 0.759452 | 0.635935 | 0.818032 | 0.890387 | 0.772161 | 0.630129 | 0.755774 | 0.888968 | 0.921452 | 0.695032 | 0.776732 | . Feb 0.690103 | 0.465000 | 0.881000 | 0.704536 | 0.773966 | 0.654786 | 0.588250 | 0.821357 | 0.949483 | 0.579607 | 0.711802 | . Mar 0.627806 | 0.217129 | 0.610645 | 0.613226 | 0.622226 | 0.787032 | 0.446774 | 0.947581 | 0.524000 | 0.742290 | 0.613871 | . Apr 0.668000 | 0.559333 | 0.551633 | 0.525967 | 0.760100 | 0.853467 | 0.614033 | 0.231133 | 0.332533 | 0.399300 | 0.549550 | . May 0.577742 | 0.748194 | 0.649097 | 0.818581 | 0.506452 | 0.548839 | 0.370903 | 0.771645 | 0.540355 | 0.790452 | 0.632226 | . Jun 0.601667 | 0.628333 | 0.588400 | 0.724233 | 0.684000 | 0.822367 | 0.523533 | 0.587833 | 0.698100 | 0.583967 | 0.644243 | . Jul 0.887226 | 0.570129 | 0.733516 | 0.856323 | 0.965226 | 0.809226 | 0.720710 | 0.742161 | 0.978065 | 0.744742 | 0.800732 | . Aug 0.879613 | 0.851903 | 0.884226 | 0.727806 | 0.754161 | 0.894226 | 0.946548 | 0.934710 | 0.677290 | 0.588097 | 0.813858 | . Sep 0.891433 | 0.761367 | 0.471067 | 0.582233 | 0.851467 | 0.827733 | 0.759133 | 0.802900 | 0.775833 | 0.654600 | 0.737777 | . Oct 0.630194 | 0.772323 | 0.858871 | 0.402355 | 0.422290 | 0.923484 | 0.711032 | 0.704032 | 0.818323 | 0.887065 | 0.712997 | . Nov 0.781467 | 0.845033 | 0.473700 | 0.958767 | 0.603933 | 0.986000 | 0.432500 | 0.547400 | 0.810467 | 0.885333 | 0.732460 | . Dec 0.887355 | 0.916161 | 0.835806 | 0.862452 | 0.746710 | 0.929065 | 0.796032 | 0.852097 | 0.805258 | NaN | 0.847882 | . All 0.740495 | 0.665499 | 0.696734 | 0.722652 | 0.704634 | 0.806036 | 0.639803 | 0.737405 | 0.735656 | 0.688033 | 0.713925 | . plot_heatmap(ops_month_year_df) . ops_weekday_year_df = pd.pivot_table(operations_df, values=&quot;westerly&quot;,index=[&quot;weekday&quot;], columns=[&quot;year&quot;], fill_value=0.5) ops_weekday_year_df = ops_weekday_year_df.set_index([[calendar.day_name[i] for i in list(ops_weekday_year_df.index)]]) . plot_heatmap(ops_weekday_year_df) . def plot_heatmap_year(year): plt.figure(figsize = (16, 10)) ops_year_df = operations_df.loc[operations_df[&#39;year&#39;] == year] ops_year_df = pd.pivot_table(ops_year_df, values=&quot;westerly&quot;,index=[&quot;month&quot;], columns=[&quot;day&quot;], fill_value=None) ops_year_df = ops_year_df.set_index([[calendar.month_abbr[i] for i in list(ops_year_df.index)]]) ax = sns.heatmap(ops_year_df, cmap = &#39;RdYlGn&#39;, annot=False, fmt=&#39;.0%&#39;, vmin=0, vmax=1, linewidths=.1, annot_kws={&quot;size&quot;: 8}, square=True, cbar_kws={&quot;shrink&quot;: .48, &#39;label&#39;: &#39;Westerly percentage&#39;}) ax.set_yticklabels(ax.get_yticklabels(), rotation = 0, fontsize = 12) ax.set_xticklabels(ax.get_xticklabels(), rotation = 0, fontsize = 12) ax.tick_params(rotation = 0) cbar = ax.collections[0].colorbar cbar.set_ticks([0, .25, .50,.75, 1]) cbar.set_ticklabels([&#39;0%&#39;, &#39;25%&#39;, &#39;50%&#39;, &#39;75%&#39;, &#39;100%&#39;]) plt.title(f&#39;Operations {year}&#39;, fontdict={&#39;fontsize&#39;:18}, pad=14); . plot_heatmap_year(2021) . plot_heatmap_year(2020) . plot_heatmap_year(2019) . plot_heatmap_year(2018) . ops_days_average_df = operations_df.groupby([operations_df.month, operations_df.day])[&#39;westerly&#39;].mean() ops_days_average_df = ops_days_average_df.unstack() ops_days_average_df = ops_days_average_df.set_index([[calendar.month_abbr[i] for i in list(ops_days_average_df.index)]]) . ops_days_average_df . day 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31 . Jan 0.797500 | 0.8835 | 0.773100 | 0.824300 | 0.9000 | 0.767300 | 0.890500 | 0.7968 | 0.840800 | 0.999500 | ... | 0.6573 | 0.764400 | 0.762400 | 0.820400 | 0.8995 | 0.900000 | 0.854500 | 0.768600 | 0.639800 | 0.600100 | . Feb 0.781100 | 0.8453 | 0.611700 | 0.626700 | 0.6915 | 0.681600 | 0.643700 | 0.7134 | 0.746400 | 0.501500 | ... | 0.7989 | 0.700000 | 0.699800 | 0.701200 | 0.6000 | 0.624700 | 0.499500 | 0.788333 | NaN | NaN | . Mar 0.700000 | 0.5993 | 0.546100 | 0.651700 | 0.6232 | 0.800000 | 0.890800 | 0.7999 | 0.784200 | 0.647500 | ... | 0.5383 | 0.637200 | 0.424600 | 0.426400 | 0.5000 | 0.481200 | 0.581100 | 0.621900 | 0.578400 | 0.549700 | . Apr 0.621100 | 0.6372 | 0.628200 | 0.602900 | 0.4989 | 0.642600 | 0.572000 | 0.5244 | 0.500000 | 0.376900 | ... | 0.4533 | 0.332800 | 0.742800 | 0.620200 | 0.7526 | 0.641200 | 0.559300 | 0.555900 | 0.597600 | NaN | . May 0.607900 | 0.5742 | 0.603500 | 0.647400 | 0.4002 | 0.500000 | 0.616200 | 0.6603 | 0.700000 | 0.700000 | ... | 0.7830 | 0.711900 | 0.635600 | 0.694000 | 0.5568 | 0.576200 | 0.508800 | 0.450700 | 0.541400 | 0.698800 | . Jun 0.621800 | 0.7890 | 0.600700 | 0.416200 | 0.5637 | 0.600100 | 0.590100 | 0.6266 | 0.485700 | 0.391000 | ... | 0.7007 | 0.761900 | 0.867000 | 0.700500 | 0.5527 | 0.600000 | 0.580700 | 0.698100 | 0.700700 | NaN | . Jul 0.720600 | 0.8516 | 0.700000 | 0.892400 | 0.8371 | 0.873200 | 0.701400 | 0.8870 | 0.876800 | 0.772100 | ... | 0.7475 | 0.715500 | 0.700000 | 0.666400 | 0.7419 | 0.907200 | 0.900100 | 0.951700 | 0.945700 | 0.932000 | . Aug 0.889800 | 0.7999 | 0.840100 | 0.908100 | 0.8531 | 0.987900 | 0.898300 | 0.7695 | 0.843400 | 0.805800 | ... | 0.7535 | 0.755600 | 0.601100 | 0.639200 | 0.7325 | 0.650900 | 0.899200 | 0.934700 | 0.800000 | 0.790500 | . Sep 0.900000 | 0.7009 | 0.600000 | 0.583700 | 0.6442 | 0.938400 | 0.749300 | 0.8067 | 0.853300 | 0.800000 | ... | 0.8207 | 0.810600 | 0.844100 | 0.891000 | 0.7009 | 0.681500 | 0.629000 | 0.700000 | 0.800000 | NaN | . Oct 0.760500 | 0.6148 | 0.773400 | 0.854200 | 0.7124 | 0.656300 | 0.840200 | 0.7497 | 0.641700 | 0.599900 | ... | 0.7465 | 0.700600 | 0.729300 | 0.848500 | 0.8000 | 0.829200 | 0.801100 | 0.637300 | 0.679500 | 0.579500 | . Nov 0.860900 | 0.9775 | 0.882900 | 0.765200 | 0.7651 | 0.681800 | 0.779300 | 0.8279 | 0.716600 | 0.861300 | ... | 0.6055 | 0.630300 | 0.652900 | 0.628100 | 0.6551 | 0.680900 | 0.681500 | 0.643200 | 0.900000 | NaN | . Dec 0.625889 | 0.6860 | 0.740889 | 0.777778 | 0.7600 | 0.877444 | 0.966556 | 1.0000 | 0.993333 | 0.828889 | ... | 0.9460 | 0.984667 | 0.877889 | 0.982222 | 0.8690 | 0.998556 | 0.728111 | 0.998444 | 0.999889 | 0.888889 | . 12 rows × 31 columns . plt.figure(figsize = (20, 14)) ax = sns.heatmap(ops_days_average_df, cmap = &#39;RdYlGn&#39;, annot=True, fmt=&#39;.0%&#39;, vmin=0, vmax=1, linewidths=.1, annot_kws={&quot;size&quot;: 9}, square=True, cbar_kws={&quot;shrink&quot;: .5, &#39;label&#39;: &#39;Westerly percentage&#39;}) ax.set_yticklabels(ax.get_yticklabels(), rotation = 0, fontsize = 12) ax.set_xticklabels(ax.get_xticklabels(), rotation = 0, fontsize = 12) ax.tick_params(rotation = 0) cbar = ax.collections[0].colorbar cbar.set_ticks([0, .25, .50,.75, 1]) cbar.set_ticklabels([&#39;0%&#39;, &#39;25%&#39;, &#39;50%&#39;, &#39;75%&#39;, &#39;100%&#39;]) _ = plt.title(f&#39;Westerly Operations Average 2012-2021&#39;, fontdict={&#39;fontsize&#39;:18}, pad=14) . plt.figure(figsize = (14, 6)) _ = sns.distplot(operations_df[&#39;westerly&#39;], kde=False, rug=True, bins = 4, rug_kws={&quot;color&quot;: &quot;b&quot;, &quot;alpha&quot;:0.06, &quot;linewidth&quot;: 1, &quot;height&quot;:0.1 } ) . plt.figure(figsize = (14, 6)) _ = sns.violinplot(x=&quot;year&quot;, y=&quot;westerly&quot;,cut=0, data=operations_df) . operations_df[&#39;westTolerance&#39;] = operations_df[&#39;westerly&#39;].apply(lambda x: round(x)) daysCountWDf = operations_df.groupby(&#39;year&#39;)[&#39;westTolerance&#39;].sum() daysCountWDf = daysCountWDf.reset_index() operations_df[&#39;eastTolerance&#39;] = operations_df[&#39;easterly&#39;].apply(lambda x: round(x)) daysCountEDf = operations_df.groupby(&#39;year&#39;)[&#39;eastTolerance&#39;].sum() daysCountEDf = daysCountEDf.reset_index() daysCount = daysCountWDf.merge(daysCountEDf) daysCount.columns = [&#39;year&#39;, &#39;Westerly&#39;, &#39;Easterly&#39;] . daysCount . year Westerly Easterly . 0 2012 | 269 | 97 | . 1 2013 | 244 | 119 | . 2 2014 | 255 | 109 | . 3 2015 | 263 | 102 | . 4 2016 | 258 | 108 | . 5 2017 | 296 | 69 | . 6 2018 | 237 | 128 | . 7 2019 | 270 | 95 | . 8 2020 | 273 | 93 | . 9 2021 | 227 | 107 | . daysCount = pd.melt(daysCount, id_vars=[&#39;year&#39;], value_vars=[&#39;Westerly&#39;, &#39;Easterly&#39;], ... var_name=&#39;operations&#39;, value_name=&#39;days&#39;) . ax = sns.barplot(x=&quot;year&quot;, y=&#39;days&#39;, hue=&quot;operations&quot;, data=daysCount.sort_values(by=&#39;year&#39;)) _ = ax.set_title(&quot;Days on specific operation prevalence&quot;) . operations_df[&#39;value_grp&#39;] = (operations_df[&#39;westerly&#39;].diff(1) != 0).astype(&#39;int&#39;).cumsum() groupedValue = operations_df.groupby(&#39;value_grp&#39;) consecutive_df = pd.DataFrame({&#39;BeginDate&#39; : groupedValue.date.first(), &#39;EndDate&#39; : groupedValue.date.last(), &#39;Consecutive&#39; : groupedValue.size(), &#39;ops&#39;: groupedValue.westerly.mean() }).reset_index(drop=True) consecutive_df[&#39;ops&#39;].replace({0: &#39;Easterly&#39;, 1: &#39;Westerly&#39;}, inplace=True) consecutive_df = consecutive_df[(consecutive_df.ops == &#39;Westerly&#39;) | (consecutive_df.ops == &#39;Easterly&#39;)] consecutive_df.sort_values(by=&#39;Consecutive&#39;, ascending=False).head(30) . BeginDate EndDate Consecutive ops . 1258 2020-06-27 | 2020-07-30 | 34 | Westerly | . 615 2015-11-05 | 2015-12-06 | 32 | Westerly | . 690 2016-06-24 | 2016-07-18 | 25 | Westerly | . 981 2018-08-06 | 2018-08-30 | 25 | Westerly | . 693 2016-07-21 | 2016-08-13 | 24 | Westerly | . 1052 2019-02-27 | 2019-03-21 | 23 | Westerly | . 501 2015-02-16 | 2015-03-08 | 21 | Westerly | . 479 2014-12-05 | 2014-12-25 | 21 | Westerly | . 1050 2019-02-03 | 2019-02-22 | 20 | Westerly | . 195 2013-03-21 | 2013-04-09 | 20 | Easterly | . 1198 2020-01-02 | 2020-01-21 | 20 | Westerly | . 791 2017-03-28 | 2017-04-16 | 20 | Westerly | . 1207 2020-02-08 | 2020-02-26 | 19 | Westerly | . 849 2017-09-05 | 2017-09-23 | 19 | Westerly | . 852 2017-09-29 | 2017-10-17 | 19 | Westerly | . 641 2016-01-24 | 2016-02-11 | 19 | Westerly | . 861 2017-11-12 | 2017-11-30 | 19 | Westerly | . 834 2017-07-22 | 2017-08-08 | 18 | Westerly | . 1287 2020-11-10 | 2020-11-27 | 18 | Westerly | . 1129 2019-08-26 | 2019-09-12 | 18 | Westerly | . 167 2012-12-25 | 2013-01-10 | 17 | Westerly | . 1267 2020-08-28 | 2020-09-13 | 17 | Westerly | . 124 2012-09-06 | 2012-09-21 | 16 | Westerly | . 485 2015-01-04 | 2015-01-19 | 16 | Westerly | . 812 2017-05-30 | 2017-06-13 | 15 | Westerly | . 157 2012-11-28 | 2012-12-12 | 15 | Westerly | . 1388 2021-08-06 | 2021-08-20 | 15 | Westerly | . 781 2017-02-16 | 2017-03-02 | 15 | Westerly | . 1044 2019-01-04 | 2019-01-18 | 15 | Westerly | . 235 2013-06-21 | 2013-07-04 | 14 | Westerly | . plt.figure(figsize = (14, 6)) ax = sns.countplot(x=&quot;Consecutive&quot;, hue=&quot;ops&quot;, data=consecutive_df.query(&#39;Consecutive &gt;= 3&#39;)) ax.set_title(&quot;Consecutive days on a specific operation 2012-2019 (&gt;= 3 days)&quot;) ax.set(xlabel=&#39;Consecutive days&#39;, ylabel=&#39;Count&#39;) _ = plt.legend(loc=&#39;upper right&#39;) . consecutive_df[&#39;DateRange&#39;] = consecutive_df[&quot;BeginDate&quot;].astype(str) + &#39; -&gt; &#39; + consecutive_df[&quot;EndDate&quot;].astype(str) df_top10_per_condition = consecutive_df.sort_values(by=&#39;Consecutive&#39;,ascending = False).groupby(&#39;ops&#39;).head(10) d = {&#39;color&#39;: [&#39;g&#39;, &#39;r&#39;]} g = sns.FacetGrid(df_top10_per_condition, row=&quot;ops&quot;, hue=&#39;ops&#39;, hue_kws=d, sharey=False) g.fig.set_figheight(8) g.fig.set_figwidth(10) _ = g.map(sns.barplot, &quot;Consecutive&quot;, &quot;DateRange&quot;) _ = g.set(ylabel=&#39;&#39;) for ax in g.axes.flat: for p in ax.patches: width = p.get_width() ax.text(width -1.6, p.get_y() + p.get_height()/2. + 0.1,&#39;{:1.0f}&#39;.format(width), ha=&quot;center&quot;) . opPerMonth = operations_df.groupby([&#39;month&#39;, &#39;year&#39;]).mean()[&#39;westerly&#39;].reset_index() . plt.figure(figsize = (14, 6)) ax = sns.boxplot(x=&quot;month&quot;, y=&quot;westerly&quot;, data=opPerMonth) .",
            "url": "https://emanuelef.github.io/test-faspages/2022/01/18/analysis-all.html",
            "relUrl": "/2022/01/18/analysis-all.html",
            "date": " • Jan 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://emanuelef.github.io/test-faspages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://emanuelef.github.io/test-faspages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://emanuelef.github.io/test-faspages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://emanuelef.github.io/test-faspages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}